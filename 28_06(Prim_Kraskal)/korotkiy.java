/**
 * Задача №97. Самый короткий путь
 * Ввод и вывод данных производятся через стандартные потоки ввода-вывода.
 * Дан ориентированный полный граф, рёбрам которого приписаны некоторые веса (длины). Веса могут быть и положительные,
 * и отрицательные, и нулевые. Нас интересует минимум длин всех возможных путей между всеми парами различных вершин этого графа.
 * Нужно будет выяснить, существует ли этот минимум, и, если существует, вычислить его.
 * (Минимума не существует в том случае, если в графе можно найти путь отрицательной длины, сколь угодно большой по модулю).
 *
 * Входные данные
 * В первой строке задано korotkiyчисло вершин N≤50. Далее идёт матрица смежности графа, то есть N строк, в каждой из которых записано
 * N чисел. j-ое число в i-ой строке матрицы смежности задает длину ребра, ведущего из i-й вершину в j-ую.
 * Длины могут принимать любые значения от -1000000 до 1000000. Гарантируется, что на главной диагонали матрицы стоят нули.
 *
 * Выходные данные
 * Выведите одно число – искомый минимум. Если его не существует, выведите  -1.
 */
import java.util.Scanner;
public class korotkiy {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int INF = Integer.MAX_VALUE;
        int maxim = Integer.MAX_VALUE;


// Ввела граф
        int[][] G = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                G[i][j] = in.nextInt();
                if (G[i][j] == -1) {
                    G[i][j] = INF;
                }
            }

        }

        // Floid
        for (int k = 0; k <n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (G[i][j] > G[i][k] + G[k][j]) {
                        G[i][j] = G[i][k] + G[k][j];

                    }
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (G[i][j] != -2147483647 && i !=j){
                    maxim = Math.min(G[i][j], maxim);
                }

            }
        }
        boolean a = false;

        for (int i = 0; i < n; i++) {
            if (G[i][i] <0) {
                a = true;
            }

        }
         if (a == true){
             System.out.println("-1");

         }
         else{
             System.out.println(maxim);
         }




     }
}
