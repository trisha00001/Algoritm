/*
Задача №112633. Расходы на путешествие
Вася решил немного попутешествовать и подсчитал, сколько стоит переезд между каждой парой близлежащих городов. После этого он наметил маршрут – последовательность городов, которые он хотел посетить. Напишите программу, которая считает общие транспортные расходы на путешествие. Некоторые города не связаны дорогами, так что проехать напрямую из одного города в другой не всегда возможно.

Входные данные
В первой строке вводится количество городов N ( 1 ≤ N ≤ 1000 ). В следующих N строках записано по N чисел, разделённых пробелами – стоимость переезда между каждой парой городов. Ноль означает, что дороги между этими городами нет. В последней строке записаны номера городов, которые хотел посетить Вася. Их может быть от 1 до 1000, они могут повторяться. Нумерация городов начинается с единицы.

Выходные данные
Программа должна вывести одно число – общую стоимость путешествия по такому маршруту или число 0, если на каком-то этапе прямой переезд из одного города в другой невозможен.

Примеры
входные данные
5
0 2 3 4 3
2 0 5 0 7
3 6 0 8 0
0 0 0 0 0
3 7 0 9 0
1 2 5 1
выходные данные
12
 */
import java.util.Scanner;
public class voyag {
    public static void main(String[] args) {
        // Считаем входные данные
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int cost = 0;
        int [] [] Gr = new int [n] [n] ;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                Gr[i][j] = in.nextInt();
            }
        }
        // Номера городов которые нужно посетить
        String[] substrings;
        String str = in.nextLine();
        str = in.nextLine();
        substrings = str.split(" ");
        int []  Dest = new int [substrings.length];


        for (int i = 0; i< substrings.length ; i++)
        {
            Dest[i]=Integer.parseInt(substrings[i]);
        }
        // Проход по номерам городов
        for (int i = 0; i<substrings.length-1 ; i++)
        {
            cost+= Gr[Dest[i]-1] [Dest[i+1]-1];
            if(Gr[Dest[i]-1] [Dest[i+1]-1] == 0)
            {
                cost = 0;
                break;
            }
        }
        System.out.print(cost);



    }
}
